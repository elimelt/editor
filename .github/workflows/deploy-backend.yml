name: Deploy Backend to Server

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - 'Dockerfile.server'
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image (local)
        run: |
          docker build -t editor-auth-server:${{ github.sha }} -f Dockerfile.server .
          docker save editor-auth-server:${{ github.sha }} -o auth-server-image.tar

      - name: Copy image and env to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./auth-server-image.tar"
          target: ${{ secrets.SERVER_WORKDIR }}

      - name: Deploy via SSH (create/update Swarm service)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="editor-auth-server:${{ github.sha }}"
            WORKDIR="${{ secrets.SERVER_WORKDIR }}"
            mkdir -p "$WORKDIR/server"
            cat > "$WORKDIR/server/.env" << 'EOF'
            PORT=3000
            GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}
            GH_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}
            FRONTEND_ORIGIN=${{ secrets.FRONTEND_ORIGIN }}
            GH_REDIRECT_URI=${{ secrets.GH_REDIRECT_URI }}
            GH_OAUTH_SCOPES=${{ secrets.GH_OAUTH_SCOPES }}
            EOF
            echo "Ensuring network exists: prod_swecc-network"
            docker network inspect prod_swecc-network >/dev/null 2>&1 || { echo "Missing network prod_swecc-network" >&2; exit 1; }
            echo "Loading image on server"
            docker load -i "$WORKDIR/auth-server-image.tar"
            echo "Create or update auth-server service"
            if docker service ls --format '{{.Name}}' | grep -q '^auth-server$'; then
              docker service update \
                --image "$IMAGE" \
                --force \
                auth-server
            else
              docker service create \
                --name auth-server \
                --network prod_swecc-network \
                --replicas 1 \
                --mount type=bind,src="$WORKDIR/server/.env",dst=/app/server/.env,ro \
                "$IMAGE"
            fi
            echo "Health check"
            curl -fsS --max-time 15 "${{ secrets.AUTH_SERVER_BASE_URL }}/health" || true


